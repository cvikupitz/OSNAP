Additional Notes Following Lecture:
Thank you for your attendance and participation during lecture today.

I mentioned that assignment 9 would be changing; I should have the new instructions posted later tonight along with some sample export data. I also mentioned some upcoming travel I have that may interfere with upcoming lecture deliveries.

I would like to have a sample final together by next week. I can't promise anything due to the level of overloaded my schedule currently is, but I will make a best effort.


For the conceptual portion of the lecture a talked a bit about scaling. This was motivated by the structure of the Domain Name System/Service. Once upon a time, name resolution was done with the hosts file, the hosts file got too big so a different strategy was needed, DNS is a super successful distributed database solution for the problem.


Most of class was devoted to describing a system to design and then designing the system.
We elected to go with wiretapping as our problem.

First, we polished the definition so that we had a problem specific enough to reason about. Our system had covertly collected data from a network link as an input and as an output a report of observed instances of spoon would be provided.

Then we worked through a set of questions to understand the system boarders and scope the amount of work the system would need to do. How/where would the input data come from and how/where would the data be retrieved.

After the highlevel inputs and outputs were defined, we started working on a process diagram that would take the input data through the needed steps to generate the output.

With a process diagram, having boxes that represented parts of the computation, we attached some estimates for the resources required for each subcomputation. We used these estimates to determine the amount of hardware needed and to map subcomputations to the hardware.

Then we scaled the system to support 4 more switches to read the traffic from. Turns out the existing host running the converter and DB was sufficient for the load (I incorrectly said that would run the host at 75% of capacity with the additional load, looking at it more carefully the host would be 100% load with the additional incoming data). The host running the sniffer and scanner was already at capacity, fortunately the sniffing and scanning can be in parallel trivially, so adding 4 more hosts running sniff/scan processes should be sufficient to service the load.