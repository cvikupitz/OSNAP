Additional Notes Following Lecture:
Thank you for your participation in lecture today. I think the conversations we had around process were very good. Thank you for sharing your thoughts.


I think we generally like process and processes.
- Processes provides confidence in the ability to complete a task
- Process helps to improve estimation, especially when we are reusing a process
- Process helps to track progress, since we can see the steps complete
- Processes can make things more efficient since we don't lose time solving solved problems
- We like to have other follow process as well, since that helps us to know what to expect


A few bold students were willing to champion bureaucracy (I'm in your camp, I think bureaucracy is generally good). 
- Having the structure can be nice to work in
- The processes add stability in the face of change
- The processes help to slow down the action, allowing a little more time to think about what is being done
- Bureaucratic processes help to distribute responsibly
    - Makes sure that the people who should be involved in decision making are
    - In dysfunctional settings may lead to problems of "nobody's fault/responsibility"

I think the reason bureaucracy is disliked is due to the friction it adds for individuals to complete their narrowly focused task.


I made a shout out to admins. They are amazing! They are the people who actually make the organization go. Make the time to be their friend and always to be kind to them. When you need to get something done in an organization, these are the people best able to help you route and complete requests.


We had a nice discussion around where processes come from
- Processes are created to solve challenges
- Some processes are artifacts of cultural inertia or tradition
    - I would suggest we be mindful/aware of when we are executing these processes. Doing something a particular way just because it has always been done that way is not a good reason. Circumstances change and processes need to be re-evaluated.
- Processes can evolve over time, evolution may be directed or may occur due to miscommunications
    - Process documentation is valuable since it can help to control how processes evolve
- Experience helps to make better processes
- Introspecting on processes can provide insight into how new processes should be constructed or existing processes should be changed

I would add on that all processes come from people... processes are not some magical or divine immutable thing. You are just as capable of defining good/great processes as anyone else. Don't ever discount your agency or ability to reason through what a good process should be to complete a task. At the same time, take the time and personal responsibility to reflect on and improve your processes.


<Instructor jumps on soapbox and starts spouting crazy philosophy>
I think we should be aware that process can span humans and machines. Good solutions will take advantage of the benefits of each where appropriate.

I think our exposure to complex processes through all of the programming and program analysis give CS students a really powerful set of skills for thinking about law, public policy, and other non-computer processes. We are able to practice how to give and understand the results of processes (programs) at much larger scales than any other discipline.
<Instructor gets off soapbox>


Last we had a long discussion around analyzing some workflows. We compared two workflows for power control in HPC systems. I think one of the best insights is that we can't evaluate the quality of the solution from the process diagrams, we can only evaluate the process.
We also identified:
- The process diagram can let us know about static versus dynamic process behaviors
- The presence or absence of steps/subprocesses communicates something about process dependencies
- There are a few things that make us feel better about diagrams
    - Less steps feel better
    - More linearity feels better
- We must be careful to understand the process in context, a process that feels good might not actually solve our problem


We finished up class by going through how to detect and resolve merge conflicts in git. There should be documentation and videos for this online... though I haven't ever really looked for them. 

The basic steps are:
- Read the git message informing you that there has been a problem
- Use git status to get the list of unmerged paths
- For each unmerged path:
    - Edit the path so that the correct data is there
    - Then add the changed path to the current change set
- Once all unmerged paths have been handled (check using git status)
    - Test your code to verify it is working and debug as needed
    - Commit the change set
    - Push the change set